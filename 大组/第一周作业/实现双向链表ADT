package com.qg.test2;

public class Node {
    int data;
    Node prev;
    Node next;
    public Node(int data){
        this.data=data;
        this.prev=null;
        this.next=null;
    }
}

package com.qg.test2;

public class DoublyLinkedList {
    private Node head;
    private Node tail;
    public DoublyLinkedList(){
        this.head=null;
        this.tail=null;
    }

    //添加结点
    public void add(int data){
        Node newNode=new Node(data);
        if(head==null){
            head=newNode;
            tail=newNode;
        }
        else{
            tail.next=newNode;
            newNode.prev=tail;
            tail=newNode;
        }
    }

    //删除结点
    public void delete(int data){
        if(head==null){
            return;
        }else{
            if(head.data==data){
                head=head.next;
                if(head!=null){
                    head.prev=null;
                }
                return;
            }
            Node current=head;
            while(current.next!=null){
                if(current.next.data==data){
                    current.next=current.next.next;
                    if(current.next!=null){
                        current.next.prev=current;
                    }else{
                        tail=current;
                    }return;
                }
                current=current.next;

            }
        }
    }

    //修改结点
    public void update(int oldData,int newData){
        Node current=head;
        while(current!=null){
            if(current.data==oldData){
                current.data=newData;
                return;
            }else{
                current=current.next;
            }
        }

    }

    //查找结点
    public boolean search(int data){
        Node current=head;
        while(current!=null){
            if(current.data==data){

                return true;
            }else{
                current=current.next;
            }
        }return false;
    }

    //销毁链表
    public void destroy(){
        Node current=head;
        while(current.next!=null){
            Node next=current.next;
            current.next=null;
            current=next;
        }
        head=null;
    }

}

