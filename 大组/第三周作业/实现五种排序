package com.qg;

import java.util.ArrayList;
import java.util.List;

public class SortUtils {
    private int[] arr;

    public SortUtils() {
    }

    //从小到大
    //实现插入排序
    public static void insertSort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            int tmp = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > tmp) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = tmp;
        }
    }

    //实现归并排序

    public static void mergeSort(int[] arr) {
        if (arr.length < 2) {
            return;
        }
        int mid = arr.length / 2;
        int[] left = new int[mid];
        int[] right = new int[arr.length - mid];
        //把arr的元素分别补充到左右数组中
        System.arraycopy(arr, 0, left, 0, left.length);
        System.arraycopy(arr, mid, right, 0, right.length);
        mergeSort(left);
        mergeSort(right);
        merge(arr, left, right);
    }

    //将左右两个数组进行合并
    public static void merge(int[] arr, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                arr[k] = left[i];
                k++;
                i++;
            } else {
                arr[k] = right[j];
                k++;
                j++;
            }
            while (i < left.length) {
                arr[k] = left[i];
                k++;
                i++;
            }
            while (j < right.length) {
                arr[k] = right[j];
                k++;
                j++;
            }

        }


    }
//实现快速排序

    // 快速排序
    public static void quickSort(int[] arr) {
        // 调用快速排序方法，传入数组、起始位置和结束位置
        quickSort(arr, 0, arr.length - 1);
    }

    private static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[low + (high - low) / 2];
        int i = low - 1;
        int j = high + 1;
        while (true) {
            do {
                i++;
            } while (arr[i] < pivot);
            do {
                j--;
            } while (arr[j] > pivot);
            if (i >= j) {
                return j;
            }
            swap(arr, i, j);
        }
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }




    //实现计数排序


    public static void countSort(int[] arr) {
        int max = arr[0];
        int min = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        ArrayList<Integer> count = new ArrayList<>();
        for (int i = 0; i < max - min + 1; i++) {
            count.add(0);
        }
        for (int i = 0; i < arr.length; i++) {
            count.set(arr[i] - min, count.get(arr[i] - min) + 1);
        }
        int index = 0;
        for (int i = 0; i < count.size(); i++) {
            int j = i;
            while (count.get(i) > 0) {
                arr[index] = min + i;
                index++;
                count.set(i, count.get(i) - 1);
            }
        }
    }


//实现基数基数排序
    public static void radixSort(int[] arr) {
        //找到最大值，根据最大值的位数确定排序轮数
        int max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        int count = 0;
        while (max != 0) {
            max = max / 10;
            count++;
        }
        for (int exp = 1; exp <= count; exp *= 10) {
            int[] output = new int[arr.length];
            int[] countArr = new int[10];

            for (int i = 0; i < arr.length; i++) {
                countArr[(arr[i] / exp) % 10]++;
            }

            for (int i = 1; i < 10; i++) {
                countArr[i] += countArr[i - 1];
            }

            for (int i = arr.length - 1; i >= 0; i--) {
                output[countArr[(arr[i] / exp) % 10] - 1] = arr[i];
                countArr[(arr[i] / exp) % 10]--;
            }

            for (int i = 0; i < arr.length; i++) {
                arr[i] = output[i];
            }
        }
    }

}

