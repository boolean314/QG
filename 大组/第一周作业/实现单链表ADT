package com.qg.test;

public class Node {
     int data;
     Node next;
public Node(int data){
    this.data=data;
    this.next=null;

}

}

package com.qg.test;

public class LinkedList {
    private Node head;

    public LinkedList() {
        this.head = null;

    }

    //添加结点
    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    //删除结点
    public void delete(int data) {
        if (head == null) {
            return;
        } else {
            if (head.data == data) {
                head = head.next;
            } else {
                Node current = head;
                while (current.next != null) {
                    if (current.next.data == data) {
                        current.next = current.next.next;
                        return;
                    }
                    current = current.next;
                }
            }
        }

    }

    //修改结点
    public void update(int oldData, int newData) {
        if (head == null) {
            return;
        } else {
            if (head.data == oldData) {
                head.data = newData;
            } else {
                Node current = head;
                while (current.next != null) {
                    if (current.next.data == oldData) {
                        current.next.data = newData;
                        return;
                    } else {
                        current = current.next;
                    }
                }
            }

        }
    }

    //查找结点
    public boolean search(int data) {
        Node current = head;
        while (current != null) {
            if (current.data == data) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    //销毁链表（手动）
    public void destroy() {
        Node current = head;
        while (current != null) {
            Node next = current.next;
            current = null;
            current = next;
        }
        head = null;
    }

    //遍历链表
    public void display() {
        Node current = head;

        while (current != null) {

            if (current.next != null) {
                System.out.print(current.data + "->");
            } else {
                System.out.println(current.data);
            }

            current = current.next;

        }
    }
    //递归实现链表反转
    public void reverse(){
        head = reverse(head);
    }

// 递归反转链表
    private Node reverse(Node current) {
        // 如果当前节点为空或者当前节点的下一个节点为空，则返回当前节点
        if(current == null || current.next == null){
            return current;
        }else{
            // 递归调用reverse方法，传入当前节点的下一个节点
            Node node = reverse(current.next);
            // 将当前节点的下一个节点的next指针指向当前节点
            current.next.next = current;
            // 将当前节点的next指针置为空
            current.next = null;
            // 返回反转后的链表的头节点
            return node;
        }
    }

//package com.qg.test;


import java.text.Format;
import java.util.Iterator;

public class TurnLinkedList {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
      list.display();
        list.reverse();
        list.display();

    }


}



    }


