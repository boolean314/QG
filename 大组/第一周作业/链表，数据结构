# **链表，数据结构**

**数据结构**
是计算机存储和组织数据的方式，应用广泛，对性能优化很有帮助



**抽象数据类型（ADT）**

抽象数据类型是指一个数学模型以及定义在这个模型上的一组操作

线性表：n个具有相同特性的数据元素的有限序列

分为顺序表和链表（单链表，双向链表，循环链表）



**单链表的基本操作**

*1.单链表的生成*

初始化链表，创建一个带头结点的空链表L，然后往空链表L里插入节点

head = (LNode *)malloc(sizeof (LNode))

head->next = NULL

*2.单链表的插入*

*3.单链表的销毁*

进行必要的判断循环遍历（head）整个链表，用free函数对每个结点释放(p)

*4.单链表的删除*



**链表的简单算法**

*单链表的反转*

1.递归实现：从后向前反转

```
public void reverse(){
        head = reverse(head);
    }

// 递归反转链表
    private Node reverse(Node current) {
        // 如果当前节点为空或者当前节点的下一个节点为空，则返回当前节点
        if(current == null || current.next == null){
            return current;
        }else{
            // 递归调用reverse方法，传入当前节点的下一个节点
            Node node = reverse(current.next);
            // 将当前节点的下一个节点的next指针指向当前节点
            current.next.next = current;
            // 将当前节点的next指针置为空
            current.next = null;
            // 返回反转后的链表的头节点
            return node;
        }
```

2.迭代实现：用指针记录下一个结点的位置，再反转当前结点的指向

*判断单链表成环* ：1.头尾成环 2.中间成环

快慢指针法：用指针slow和fast对链表进行遍历，慢指针slow每次走一步，快指针fast每次走两步，如果链表成环，它们最后都会相遇。

*返回单链表中间节点*

1.设置快慢指针

2.快指针到达链表尾部，停止迭代

思路：快指针每次走两步，慢指针每次走一步，待快指针走到尾，慢指针正好走到中间节点。

*单链表分拆*

1.设置遍历指针和构造指针

2.一边遍历一边构造（根据分拆条件判断）
