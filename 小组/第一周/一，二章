# **一，二章**

## **日志工具Log**

1.

Log.v() verbose

Log.d("当前类名","想要打印的内容") debug

Log.i() info

Log.w() warn

Log.e() error

快捷键：logi+Tab



2.日志的级别控制

只有我们用来打印日志的方法级别高于选中的级别，日志才会显示出来



## **活动**

1.编写好布局后，要回到activity中加载布局：

  即在onCreate()中，加上setContentView(布局文件的id)；

R文件中已经自动生成了布局的id，引用即可：R.layout.first_layout

2.所有的活动都要在AndroidManifest.xml中注册才能生效（Android studio已经帮我们注册）

 然后还要为程序配置主活动：在AndroidManifest.xml<activity>中加入

```
 <intent-filter>
<action android:name="android.intent.action.MAIN"/>
<category android:name="android.intent.category.LAUNCHER"/>
    </intent-filter>
```

用android：label="xxx"还可以指定活动中标题栏的内容



## **Toast**

1.定义一个弹出Toast的触发点

2.在FirstActivity中通过Button Button1=(Button)findViewById（R.id.Button_1）;得到按钮的实例

3.调用Button1.setOnClickListener(new View.OnClickListener){}为按钮注册一个监听器

4.重写OnClick（View v）方法，在方法中利用Toast.makeText()创建一个Toast对象，再调用show（）；

Toast.makeText(Context对象（可以传活动本身，如FirstActivity.this),"Toast显示的文本内容"，显示时长（Toast.length_SHORT或者Toast.length.LONG)



## **Menu**

1.新建一个菜单

在res下新建一个menu文件夹，再在该文件夹里新建一个Menu resource file命名为main，

然后在main.xml中创建菜单项：

<item

android:id="@+id/add_item"

android:title="Add"

/>

<item

android:id="@+id/remove_item"

android:title="Remove"

/>



2.回到First activity中重写onCreateOptionsMenu(Menu menu)

```
{
getMenuInflater().inflate.(R.menu.main,menu);//第一个参数用于指定用哪个资源文件来创建菜单，第二个参数是用来指定创建出的菜单添加到哪个Menu对象中
return true;//表示允许创建的菜单显示出来
}
```

3.定义菜单响应事件：

在FirstActivity中重写onOptionsItemSelected(MenuItem item)

```
{
    switch(item.getItemId())
        {case R.id.add_item:
        Toast.makeText(this,"You click Add",Toast.LENGTH.SHORT).show();
            break;
                    case R.id.remove_item:
        Toast.makeText(this,"You clicked Remove",Toast.LENGTH.SHORT).show();
                break;
default:
        }
        return true;

        }
```

```
@Override
// 重写onCreateOptionsMenu方法
public boolean onCreateOptionsMenu(Menu menu) {
    // 获取菜单布局
    getMenuInflater().inflate(R.menu.main,menu);
    // 返回true表示菜单已创建
    return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item){
    // 判断点击的菜单项
    if(item.getItemId()==R.id.add_item){
        // 如果点击的是添加项，则显示提示信息
        Toast.makeText(this,"You clicked Add",Toast.LENGTH_SHORT).show();
    }
    else if(item.getItemId()==R.id.remove_item){
        // 如果点击的是移除项，则显示提示信息
        Toast.makeText(this,"You clicked Remove",Toast.LENGTH_SHORT).show();
    }
    // 返回true，表示处理了该事件
    return true;
}
```

销毁活动：按Back键

或者修改监听器中的代码，改为finish();



## **Intent**

是各组件之间进行交互的一种重要方式，一般用于启动服务，启动活动，以及发送广播

**显式intent**

修改onClick中的点击事件：把intent传递给startActivity方法

```
Intent intent=new Intent(FirstActivity.this,SecondActivity.class);
startActivity(intent);
```



**隐式intent**

​	先在AndroidManifest.xml给活动添加

```
 <intent-filter>
<action android:name="com.example.activitytest.ACTION_START" />
<category android:name="android.intent.category.DEFAULT" />
    </intent-filter>
```

再把action的字符串直接传给intent，而DEFAULT这种category是默认的，在执行startActivity时会自动传给intent

也可以通过intent.addCategory("")手动传，不过要先在AndroidManifest手动定义一个category



**intent的其他用法**

打开网页

```
@Override
public void onClick(View v){
    Intent intent=new Intent(Intent.ACTION_VIEW);
    intent.setData(Uri.parse("http://www.baidu.com"));
  //将一个字符串形式的URL解析成一个Uri对象。
  startActivity(intent);
}
```

![image-20250306233020231](C:\Users\yyz20\AppData\Roaming\Typora\typora-user-images\image-20250306233020231.png)

拨号

```
@Override
public void onClick(View v){
    Intent intent=new Intent(Intent.ACTION_DIAL);
    intent.setData(Uri.parse("tel:10086"));
    startActivity(intent);
}
```



## **传递数据**

1.向下一个活动传递数据

```
Button1.setOnClickListener(new View.OnClickListener(){
    @Override
    public void onClick(View v){
        String data="Hello,SecondActivity";
        Intent intent=new Intent(FirstActivity.this,SecondActivity.class);//显式intent
       intent.putExtra("extra_data",data);//调用putExtra方法向intent输入数据，第一个参数是键，用来后面获取数据，第二个参数才是真正要传的内容
        startActivity(intent);
    }

});
```

```
在SecondActivity中onCreate（）中
Intent intent=getIntent();//获取启动SecondActivity的intent
String data=intent.getStringExtra("extra_data");//调用getStringExtra("键")获取数据，如果数据是int类型，就用getIntExtra("键")
Log.d("SecondActivity",data);
```



2.返回数据给上一个活动

1.先在SecondActivity中

```
@Override
public void onClick(View v) {
    Intent intent = new Intent();
    intent.putExtra("data_return", "Hello,FirstActivity");//data_return只是一个键
    setResult(RESULT_OK, intent); //RESULT_OK用于向上一个活动返回处理结果（返回结果码），intent用来把数传回去
    finish();
}
```

2.在First Activity中

```
public void onClick(View v) {

    Intent intent = new Intent(FirstActivity.this, SecondActivity.class);

    startActivityForResult(intent,1);期待在活动2销毁时返回一个结果给上一个活动，1是请求码，唯一即可
}
```

```
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    // 调用父类的onActivityResult方法
    super.onActivityResult(requestCode, resultCode, data);
    // 根据requestCode判断返回的数据
    switch (requestCode) {
        case 1:
            // 如果返回的结果码为RESULT_OK
            if (resultCode == RESULT_OK) {
                // 获取返回的数据
                String returndata = data.getStringExtra("data_return");
                // 打印返回的数据
                Log.d("FirstActivity", returndata);
            }
            break;
        default:


    }
}
```



## 2.4活动的生命周期

**活动的状态**

1.运行状态：栈顶

2.暂停状态：不位于栈顶，但仍然可见，如对话框

3.停止状态：不位于栈顶，并完全不可见

4.销毁状态：活动出栈（按back或finish（））

![image-20250310112000978](C:\Users\yyz20\AppData\Roaming\Typora\typora-user-images\image-20250310112000978.png)

   **临时数据的存储**

```
@Override
// 重写onSaveInstanceState方法，用于保存当前Activity的状态
public void onSaveInstanceState(Bundle outState){
    super.onSaveInstanceState(outState);
    // 将临时数据保存到Bundle中
    String tempData="Something you just type";
    outState.putString("data_key",tempData);

}
```

在onCreate 方法中恢复内容

```
if(savedInstanceState!=null){
    String tempData=savedInstanceState.getString("data_key");
    
}
```

 

## **2.5活动的启动模式**

**2.5.1 standard**

是默认的启动模式，即便是在栈顶，多次启动同一个活动也会重新创建新的活动实例

**2.5.2 singleTop**

```
android:launchMode="singleTop"
```

当前活动已经处于栈顶，再多次启动该活动不会重新创建新的活动实例，**但是如果该活动不在栈顶，再重新启动活动则会创建新的活动实例**

**2.5.3 singleTask**

活动启动前，**会先检查返回栈中是否已经存在该活动的实例**，如果发现已经存在，那么直接使用改该实例，并且把在这个活动之上的所有活动统统出栈

**2.5.4 singleInstance**

单独创建一个栈来管理这个活动，从而实现这个活动的实例可以被共享







## **2.6活动的最佳实践**

**1.知晓当前是在哪个活动**

新定义一个简单的java类BaseActivity，继承于AppCompatActivity,在BaseActivity中重写onCreate方法，获取当前实例的类字



再让FirstActivity，SecondActivity继承BaseActivity

当我们执行活动时，观察logcat就知道当前是在哪个活动了



**2.随时随地退出程序**

 1.先创建一个ActivityCollector java类

```
public class ActivityCollector {
    // 定义一个静态的Activity列表
    public static List<Activity>activities=new ArrayList<>();
    // 添加Activity到列表中
    public static void addActivity(Activity activity){
        activities.add(activity);
    }
    // 从列表中移除Activity
    public static void removeActivity(Activity activity){
        activities.remove(activity);
    }
    // 结束所有Activity
    public static void finishAll(){
        for(Activity activity:activities){
            // 如果Activity没有结束，则结束
            if(!activity.isFinishing()){
                activity.finish();
            }
        }

    }
}
```

2.再去BaseActivity中重写onCreate和onDestory方法

```
public class BaseActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d("BaseActivity",getClass().getSimpleName());
ActivityCollector.addActivity(this);
    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
        ActivityCollector.removeActivity(this);
    }
}
```

3.想在哪个活动通过点击按钮直接退出则在活动的onClick方法中调用finish All（）；

```
public void onClick(View v) {
  ActivityCollector.finishAll();
}
```

![image-20250311095444655](C:\Users\yyz20\AppData\Roaming\Typora\typora-user-images\image-20250311095444655.png)



3.编写活动的良好习惯

假如别人启动我写的活动需要传递一些参数到我的活动中，可以在我的活动中添加一个actionStart()方法

```
public static void actionStart(Context context,String data1,String data2){
    Intent intent=new Intent(context,SecondActivity.class);
    intent.putExtra("param1",data1);
    intent.putExtra("param2",data2);
    context.startActivity(intent);

}
```

这样别人启动我的活动，就可以在onClick方法中直接调用SecondActivity.actionStart(FirstActivity.this,data1,data2)；

